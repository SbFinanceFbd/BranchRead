/*
 * Loan
 *
 * Branch read docs
 *
 * API version: 0.0.1
 * Contact: shivukumar076@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package controller

import (
	"encoding/json"
	"net/http"
	"strconv"
	"time"

	config "github.com/SbFinanceFbd/BranchRead/src/main/go/config"
	"github.com/SbFinanceFbd/BranchRead/src/main/go/model"
	"github.com/SbFinanceFbd/BranchRead/src/main/go/repo/branchRepo"
	l "github.com/SbFinanceFbd/golib/logger"
	"github.com/gin-gonic/gin"
)

// GetBranchs godoc
// @Summary      Branch
// @Description  Branch
// @Tags         Branch
// @Accept       json
// @Produce      json
// @Param        page   path string true "Page Number"
// @Param        size   path string true "Per Page Records"
// @Success      200  {object}  model.BranchsResponse
// @Failure      400  {object}  model.BranchsResponse
// @Failure      404  {object}  model.BranchsResponse
// @Failure      500  {object}  model.BranchsResponse
// @Router       /getBranchs/{page}/{size} [get]
func GetBranchs(c *gin.Context) {
	action := "GetBranchs"
	pageStr := c.Param("page")
	sizeStr := c.Param("size")
	l.Info.Printf("%v [Request Data]-> BranchId: %v, start: %v, \n", action, pageStr, sizeStr)
	if len(pageStr) == 0 {
		msg := "Page number should be greater then 0"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, msg, pageStr, sizeStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	if len(sizeStr) == 0 {
		msg := "Size should be greater then 0"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, msg, pageStr, sizeStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	page, err := strconv.ParseInt(pageStr, 10, 64)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, msg, pageStr, sizeStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}
	size, err := strconv.ParseInt(sizeStr, 10, 64)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, msg, pageStr, sizeStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	start := page*size - size

	branchArr, err := branchRepo.GetBranchs(start, size)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, msg, pageStr, sizeStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	var branchDataArr []model.BranchData
	for i := 0; i < len(branchArr); i++ {
		branchInnerArr := branchArr[i]
		id, _ := strconv.ParseInt(branchInnerArr[0], 10, 64)
		createdAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[10])
		updatedAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[11])
		branchData := model.BranchData{
			Id:               id,
			Name:             branchInnerArr[1],
			Address:          branchInnerArr[2],
			Place:            branchInnerArr[3],
			Taluka:           branchInnerArr[4],
			District:         branchInnerArr[5],
			State:            branchInnerArr[6],
			PinCode:          branchInnerArr[7],
			BranchTxnTblName: branchInnerArr[8],
			Status:           branchInnerArr[9],
			CreatedAt:        createdAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
			UpdatedAt:        updatedAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
			CreatedBy:        branchInnerArr[12],
			UpdatedBy:        branchInnerArr[13],
			Remarks:          branchInnerArr[14],
		}
		branchDataArr = append(branchDataArr, branchData)
	}
	resp := model.BranchsResponse{Code: 0, Message: "Success"}
	resp.Data = branchDataArr
	respStr, _ := json.Marshal(resp)
	l.Info.Printf("%v [Request Data]-> BranchId: %v, start: %v, [Response Data]-> %v\n", action, pageStr, sizeStr, string(respStr))
	c.JSON(http.StatusOK, resp)
}

// GetBranchByBranchId godoc
// @Summary      Branch
// @Description  Branch
// @Tags         Branch
// @Accept       json
// @Produce      json
// @Param        branchId   path string true "Branch Id"
// @Success      200  {object}  model.BranchsResponse
// @Failure      400  {object}  model.BranchsResponse
// @Failure      404  {object}  model.BranchsResponse
// @Failure      500  {object}  model.BranchsResponse
// @Router       /getBranchByBranchId/{branchId} [get]
func GetBranchByBranchId(c *gin.Context) {
	action := "GetBranchByBranchId"
	branchIdStr := c.Param("branchId")
	l.Info.Printf("%v [Request Data]-> BranchId: %v, \n", action, branchIdStr)
	if len(branchIdStr) == 0 {
		msg := "Invalid Branch Id"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, [Response Data]-> %v\n", action, msg, branchIdStr, string(respStr))
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	branchId, err := strconv.ParseInt(branchIdStr, 10, 64)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, [Response Data]-> %v\n", action, msg, branchIdStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	branchArr, err := branchRepo.GetBranchByBranchId(branchId)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, [Response Data]-> %v\n", action, msg, branchIdStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	if len(branchArr) == 0 {
		msg := "Branch not found"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchId: %v, [Response Data]-> %v\n", action, msg, branchIdStr, string(respStr))
		c.JSON(http.StatusNotFound, resp)
		return
	}

	branchInnerArr := branchArr[0]
	id, _ := strconv.ParseInt(branchInnerArr[0], 10, 64)
	createdAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[10])
	updatedAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[11])
	branchData := model.BranchData{
		Id:               id,
		Name:             branchInnerArr[1],
		Address:          branchInnerArr[2],
		Place:            branchInnerArr[3],
		Taluka:           branchInnerArr[4],
		District:         branchInnerArr[5],
		State:            branchInnerArr[6],
		PinCode:          branchInnerArr[7],
		BranchTxnTblName: branchInnerArr[8],
		Status:           branchInnerArr[9],
		CreatedAt:        createdAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
		UpdatedAt:        updatedAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
		CreatedBy:        branchInnerArr[12],
		UpdatedBy:        branchInnerArr[13],
		Remarks:          branchInnerArr[14],
	}

	resp := model.BranchResponse{Code: 0, Message: "Success"}
	resp.Data = branchData
	respStr, _ := json.Marshal(resp)
	l.Info.Printf("%v [Request Data]-> BranchId: %v, [Response Data]-> %v\n", action, branchIdStr, string(respStr))
	c.JSON(http.StatusOK, resp)
}

// GetBranchByBranchName godoc
// @Summary      Branch
// @Description  Branch
// @Tags         Branch
// @Accept       json
// @Produce      json
// @Param        branchName   path string true "Branch Name"
// @Success      200  {object}  model.BranchsResponse
// @Failure      400  {object}  model.BranchsResponse
// @Failure      404  {object}  model.BranchsResponse
// @Failure      500  {object}  model.BranchsResponse
// @Router       /getBranchByBranchName/{branchName} [get]
func GetBranchByBranchName(c *gin.Context) {
	action := "GetBranchByBranchName"
	branchNameStr := c.Param("branchName")
	l.Info.Printf("%v [Request Data]-> BranchName: %v, \n", action, branchNameStr)
	if len(branchNameStr) == 0 {
		msg := "Invalid Branch Id"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchName: %v, [Response Data]-> %v\n", action, msg, branchNameStr, string(respStr))
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	branchArr, err := branchRepo.GetBranchByBranchName(branchNameStr)
	if err != nil {
		msg := err.Error()
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchName: %v, [Response Data]-> %v\n", action, msg, branchNameStr, string(respStr))
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	if len(branchArr) == 0 {
		msg := "Branch not found"
		resp := model.BranchsResponse{Code: 1, Message: msg}
		respStr, _ := json.Marshal(resp)
		l.Error.Printf("%v [Error]-> %v , [Request Data]-> BranchName: %v, [Response Data]-> %v\n", action, msg, branchNameStr, string(respStr))
		c.JSON(http.StatusNotFound, resp)
		return
	}

	branchInnerArr := branchArr[0]
	id, _ := strconv.ParseInt(branchInnerArr[0], 10, 64)
	createdAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[10])
	updatedAt, _ := time.Parse(config.AppConfig.MustGetString("time.format.get.from.db"), branchInnerArr[11])
	branchData := model.BranchData{
		Id:               id,
		Name:             branchInnerArr[1],
		Address:          branchInnerArr[2],
		Place:            branchInnerArr[3],
		Taluka:           branchInnerArr[4],
		District:         branchInnerArr[5],
		State:            branchInnerArr[6],
		PinCode:          branchInnerArr[7],
		BranchTxnTblName: branchInnerArr[8],
		Status:           branchInnerArr[9],
		CreatedAt:        createdAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
		UpdatedAt:        updatedAt.Format(config.AppConfig.MustGetString("time.format.to.insert.db")),
		CreatedBy:        branchInnerArr[12],
		UpdatedBy:        branchInnerArr[13],
		Remarks:          branchInnerArr[14],
	}

	resp := model.BranchResponse{Code: 0, Message: "Success"}
	resp.Data = branchData
	respStr, _ := json.Marshal(resp)
	l.Info.Printf("%v [Request Data]-> BranchName: %v, [Response Data]-> %v\n", action, branchNameStr, string(respStr))
	c.JSON(http.StatusOK, resp)
}

// ping godoc
// @Summary      Ping
// @Description  Ping
// @Tags         Ping
// @Success      200              {string}  string    "ok"
// @failure      400              {string}  string    "error"
// @Router       /ping [get]
func Ping(c *gin.Context) {
	c.String(http.StatusOK, "PONG")
}
